VLSI 
MOD N
library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
use IEEE.STD_LOGIC_UNSIGNED.ALL; 
use IEEE.STD_LOGIC_ARITH.ALL; 
-- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --use IEEE.NUMERIC_STD.ALL; 
entity mod_n is 
Generic(N: integer :=4); 
Port ( clk : in STD_LOGIC; 
reset : in STD_LOGIC; 
--enable : in STD_LOGIC; 
Q : out STD_LOGIC_VECTOR (N-1 downto 0));
 end mod_n; 

architecture Behavioral of mod_n is 
signal clkout : std_logic; 
signal temp : std_logic_vector(3 downto 0); 
signal count: integer range 0 to 49999999 := 0;
 Signal count1:std_logic_vector(N-1 downto 0); 
begin 
--process(clk,reset) 
--begin 
--if(reset = '1') then 
--count <= 0; 
--clkout <= '0'; 
--elsif(clk'event and clk='1') then 
--if(count = 49999999) then 
--clkout <= not clkout; 
--count <= 0;
--else 
--count <= count+1; 
--end if; 
--end if; 
--end process; 
process(clk,reset) 
begin 
if(reset='1')then 
count1<=(others=>'0'); 
--elsif(clkout'event and clkout='1')then 
--if(enable='1')then 
else
count1<= count1 + 1; 
end if; 
--end if; 
Q<=count1; 
end process; 
end architecture; 
-------------------------------------------------------------------------------------------------------------------------------

Testbench:


library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
use IEEE.STD_LOGIC_ARITH.ALL; 
use IEEE.STD_LOGIC_UNSIGNED.ALL; 
-- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --use IEEE.NUMERIC_STD.ALL; 
-- Uncomment the following library declaration if instantiating -- any Xilinx leaf cells in this code. 
--library UNISIM; 
--use UNISIM.VComponents.all; 
entity mod_n_test is 
end mod_n_test; 
architecture Behavioral of mod_n_test is 
component mod_n 
Port ( clk: in std_logic; -- clock input 
reset: in std_logic; -- reset input 
--enable: in std_logic; -- enable input 
Q: out std_logic_vector(3 downto 0) -- output 4-bit counter
 ); 
end component ;
signal reset,clk --enable 
:std_logic; 
signal Q:std_logic_vector(3 downto 0); 
constant clk_period : time := 10ns; 
Begin 
UUT: mod_n port map(clk=>clk,reset=>reset,--enable=>enable,
Q=>Q); 
process 
Begin 
clk<='0'; 
wait for clk_period/2; 
clk<='1'; 
wait for clk_period/2; 
end process; 
process 
begin 
reset<= '1'; 
wait for 10ns; 
reset <= '0'; 
--enable <= '1'; 
wait for 10ns; 
--enable <= '0'; 
--wait for 10ns; 
--enable <= '1'; 
--wait for 60ns; 

end process; 
end Behavioral;
