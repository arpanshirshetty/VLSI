VLSI 
SHIFT REG

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity shift_register1 is
    Port ( Pi : in STD_LOGIC_VECTOR(3 downto 0);
           Si : in STD_LOGIC;
           mode : in STD_LOGIC_VECTOR(1 downto 0);
           load : in STD_LOGIC;
           reset : in STD_LOGIC;
           clk : in STD_LOGIC;
           Po : out STD_LOGIC_VECTOR(3 downto 0);
           So : out STD_LOGIC);
end shift_register1;
           
           architecture Behavioral of shift_register1 is
           signal clkout:STD_LOGIC;
           signal counter: integer range  0 to 49999999:=0;
           signal temp: STD_LOGIC_VECTOR(3 downto 0);
           begin
           process (clk,reset)
           begin
           if(reset='1')then
           clkout<='0';
           counter <=0;
           elsif(clk'event and clk='1')then
           if (counter=49999999) then
           clkout<=not clkout;
           counter<= 0;
           else
           counter<=counter+1;
           end if;
           end if;
           end process;
           
           process(clkout,reset)
           begin
           if(reset='1')then
           So<='0';
           Po<="0000";
           elsif(clkout' event and clkout='1')then
           case mode is
           when"00"=>
           So<='0';
           Po<=Pi;
           when "01"=>
           Po<="0000";
           temp(3)<=Si;
           temp(2)<=temp(3);
           temp(1)<=temp(2);
           temp(0)<=temp(1);
           So<=temp(01);
           when "10"=>
           if(load='1')then
           temp<=Pi;
           else
           temp(2)<=temp(3);
           temp(1)<=temp(2);
           temp(0)<=temp(1);
           So<=temp(0);
           end if;
           when others=>
           if (load='1')then
           temp(3)<=Si;
           temp(1)<=temp(2);
           temp(0)<=temp(1);
           else
           Po<=temp;
           end if;
           end case;
           end if;
           end process;
           end Behavioral;
-----------------------------------------------------------------------------------------------------------

 TEST BENCH CODE:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity shift_reg3 is
end shift_reg3;

architecture Behavioral of shift_reg3 is
component shift_register1
Port ( Pi : in STD_LOGIC_VECTOR(3 downto 0);
           Si : in STD_LOGIC;
           mode : in STD_LOGIC_VECTOR(1 downto 0);
           load : in STD_LOGIC;
           reset : in STD_LOGIC;
           clk : in STD_LOGIC;
           Po : out STD_LOGIC_VECTOR(3 downto 0);
           So : out STD_LOGIC);
           end component;
              signal reset,clk,Si,load :std_logic;
              signal so:std_logic;
              signal pi:std_logic_vector(3 downto 0);
              signal po:std_logic_vector(3 downto 0);
              signal mode:std_logic_vector(1 downto 0);
              constant clk_period : time := 10ns;
              Begin
                  UUT: shift_register1 port map(clk=>clk,reset=>reset,si=>si,pi=>pi,so=>so,po=>po,mode=>mode,load=>load);
                  process
                  Begin
                  clk<='0';
                  wait for clk_period/2;
                  clk<='1';
                  wait for clk_period/2;
                  end process;
                  process
                  begin
                  reset<= '1';
                  wait for 10ns;
                  reset <= '0';
                  wait for 10ns;
                  mode <= "00";
                  pi<="0001";
                  wait for 20ns;
                  mode <= "01";
                  si<= '1';
                  wait for 50ns;
                  mode <= "10";
                  load <= '1';
                  pi<="0101";
                  wait for 10ns;
                  load <= '0';
                  wait for 50ns;
                  mode <= "11";
                  load <= '0';
                  si<='1';
                  wait for 10ns;
                  load <= '1';
                  wait for 50ns;
                  end process;
          end Behavioral;

